@page "/VendorList"
@using CP.Shared
@inject HttpClient Http
<RadzenCard class="my-4" style="display: flex; align-items: center; gap: 0.5rem">
    <div style="white-space:nowrap; margin-right: 16px">Density:</div>
    <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value"
                     Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
</RadzenCard>
<RadzenDataGrid Data="@Customers" TItem="Customer" FilterMode="FilterMode.Advanced" Density="@Density"
                AllowPaging="true" AllowSorting="true"
                AllowGrouping="false" AllowVirtualization="false" AllowColumnResize="true" AllowColumnReorder="true"
                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" SelectionMode="DataGridSelectionMode.Multiple"
                PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" AllowColumnPicking="false" PageSizeOptions="@pageSizeOptions" IsLoading=@isLoading>
    <Columns>
        <RadzenDataGridColumn TItem="Customer" Width="50px" Sortable="false" Filterable="false" Groupable="false" Pickable="false">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool" Value="@(Customers.Any(i => selectedCustomer != null && selectedCustomer.Contains(i)))"
                                Change="@(args => selectedCustomer = args ? Customers.ToList() : null)" />
            </HeaderTemplate>
            <Template Context="customer">
                <RadzenCheckBox TriState="false" TValue="bool" Change="@(args=>RemoveObjectFromList(args,customer))" Value="@(selectedCustomer != null && selectedCustomer.Contains(customer))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Customer" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="Customer" Property="FirstName" Title="FirstName" />
        <RadzenDataGridColumn TItem="Customer" Property="LastName" Title="LastName" />
        <RadzenDataGridColumn TItem="Customer" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="Customer" Property="AddressId" Title="AddressId" />
        <RadzenDataGridColumn TItem="Customer" Property="Street" Title="Street" />
        <RadzenDataGridColumn TItem="Customer" Property="City" Title="City" />
        <RadzenDataGridColumn TItem="Customer" Property="State" Title="State" />
        <RadzenDataGridColumn TItem="Customer" Property="ZipCode" Title="ZipCode" />
        <RadzenDataGridColumn TItem="Customer" Property="Country" Title="Country" />
    </Columns>


</RadzenDataGrid>

@code {
    Density Density = Density.Default;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 25, 50, 100 };
    IEnumerable<Customer> Customers = Enumerable.Empty<Customer>();
    List<Customer> selectedCustomer = new List<Customer>();
    RadzenDataGrid<Customer> grid;

    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Customers = await Http.GetFromJsonAsync<List<Customer>>("Portal/Vendors");
        isLoading = false;
    }
    private async Task RemoveObjectFromList(object val, Customer custo)
    {
        var checkValue = val.ToString();
        if (checkValue == "False")
        {
            selectedCustomer.Remove(custo);
            //await grid.Reload();
        }
        else
        {
            selectedCustomer ??= new List<Customer>();
            selectedCustomer.Add(custo);
        }

    }
}
