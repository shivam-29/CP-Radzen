@page "/workList"

@inject HttpClient Http
<RadzenCard class="my-4" style="display: flex; align-items: center; gap: 0.5rem">
    <div style="white-space:nowrap; margin-right: 16px">Density:</div>
    <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value"
                     Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
</RadzenCard>
<RadzenDataGrid Data="@Works" TItem="Work" FilterMode="FilterMode.Simple" Density="@Density"
                AllowPaging="true" AllowSorting="true"
                AllowGrouping="false" AllowVirtualization="false" AllowColumnResize="true" AllowColumnReorder="true"
                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" AllowColumnPicking="false" PageSizeOptions="@pageSizeOptions" IsLoading =@isLoading>
    <Columns>
        <RadzenDataGridColumn TItem="Work" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="Work" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Work" Property="RequestType" Title="RequestType" />
        <RadzenDataGridColumn TItem="Work" Property="ChangeType" Title="ChangeType" />
        <RadzenDataGridColumn TItem="Work" Property="RepresentativeName" Title="RepresentativeName" />
        <RadzenDataGridColumn TItem="Work" Property="ReviewerName" Title="ReviewerName" />
        <RadzenDataGridColumn TItem="Work" Property="Status" Title="Status" />
        <RadzenDataGridColumn TItem="Work" Property="Created" Title="Created" />
        <RadzenDataGridColumn TItem="Work" Property="RequestedBy" Title="RequestedBy" />
    </Columns>


</RadzenDataGrid>

@code {
    Density Density = Density.Default;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 25, 50, 100 };
    IEnumerable<Work> Works = Enumerable.Empty<Work>();
    bool isLoading = false;

    protected override async Task OnInitializedAsync() 
    {
        isLoading = true;
        Works = await Http.GetFromJsonAsync<List<Work>>("Portal/Works");
        isLoading = false;
    }
}
